name: CI-CD FitApp

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  IMAGE_NAME: fitapp
  PORT: "8000"

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # optional: install test deps here
          pip install pytest

      - name: Run tests
        run: |
          # keep it minimal for demo; adapt to your test folder
          python -m pytest -q

      - name: Azure login (SP secret)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build & push image to ACR
        env:
          ACR: ${{ secrets.AZ_ACR_NAME }}
        run: |
          IMAGE="${ACR}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # login to ACR using the Azure context
          az acr login -n "$ACR"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Ensure Container Apps extension
        run: |
          az extension add --name containerapp --upgrade

      - name: Deploy/Update Container App
        env:
          RG: ${{ secrets.AZ_RG }}
          ENV: ${{ secrets.AZ_CONTAINERAPPS_ENV }}
          APP: ${{ secrets.AZ_CONTAINERAPP_NAME }}
          IMAGE: ${{ env.IMAGE }}
          DB_URL: ${{ secrets.DB_URL }}
          PORT: ${{ env.PORT }}
        run: |
          # try update first, create if it doesn't exist
          set -e
          if az containerapp show -n "$APP" -g "$RG" >/dev/null 2>&1; then
            az containerapp update \
              -n "$APP" -g "$RG" \
              --image "$IMAGE" \
              --set-env-vars DB_URL="$DB_URL" \
              --query properties.latestRevisionName -o tsv
          else
            az containerapp create \
              -n "$APP" -g "$RG" \
              --environment "$ENV" \
              --image "$IMAGE" \
              --ingress external --target-port "$PORT" \
              --env-vars DB_URL="$DB_URL"
          fi

      - name: Show app URL
        env:
          RG: ${{ secrets.AZ_RG }}
          APP: ${{ secrets.AZ_CONTAINERAPP_NAME }}
        run: |
          az containerapp show -n "$APP" -g "$RG" \
            --query properties.configuration.ingress.fqdn -o tsv
